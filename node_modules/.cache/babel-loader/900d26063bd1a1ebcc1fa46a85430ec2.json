{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noah Wotring\\\\Desktop\\\\Code\\\\ReactUserDataPractice\\\\my-app\\\\src\\\\pages\\\\ZombieMath.js\";\nimport React, { useState, userContext, useEffect } from 'react';\nimport './zombie_math.css';\nimport { UserContext } from \"../providers/UserProvider\";\n\nconst ZombieMath = props => {\n  const user = props.user;\n  const [score, changeScore] = useState(0);\n  const [activated, activatedGame] = useState(false);\n  const [currentAnswer, changeAnswer] = useState(0);\n  const [lifepoints, changeLifePoints] = useState(5);\n  const [numberSet, genNumbers] = useState({\n    num1: null,\n    num2: null,\n    answer: null\n  });\n  const [timeLeft, changeTime] = useState(0);\n\n  const generateNumbers = () => {\n    let num1 = Math.floor(Math.random() * 100);\n    let num2 = Math.floor(Math.random() * 100);\n    let answer = num1 + num2;\n    genNumbers({\n      num1: num1,\n      num2: num2,\n      answer: answer\n    });\n  };\n\n  useEffect(() => {\n    generateNumbers();\n  }, []);\n\n  const onChangeHandler = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n\n    if (name === \"currentAnswer\") {\n      changeAnswer(value);\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    if (currentAnswer === numberSet.answer.toString()) {\n      alert(\"correct\");\n      changeScore(score + 1);\n      changeAnswer(0);\n      generateNumbers();\n    } else {\n      alert(\"your answer was \" + document.querySelector('#answerAttempt').value + \", which is FALSE, the current answer is \" + numberSet.answer);\n      generateNumbers();\n      changeAnswer(0);\n    }\n  };\n\n  const startGame = () => {\n    changeTime(10);\n    generateNumbers();\n    countDown();\n  };\n\n  const countDown = () => {\n    setTimeout(() => {\n      changeTime(timeLeft - 1);\n    }, 1000);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"zombie_math_background text-center block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \" \", timeLeft, \" \"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }\n  }, \" Hello, your score is \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"bg-red-200 border-blue-300 border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 34\n    }\n  }, score, \" \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-gray-400 w-1/2 h-32 container block my-auto mx-auto border border-red-200 relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"number container mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"num1 inline-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, numberSet.num1, \" \"), \" + \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"num2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 74\n    }\n  }, numberSet.num2, \" =\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"answerAttempt\",\n    className: \"w-1/12 \",\n    name: \"currentAnswer\",\n    value: currentAnswer,\n    placeholder: \"\",\n    id: \"answerAttempt\",\n    onChange: event => onChangeHandler(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), \" \")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \" absolute bottom-0 right-0 border border-blue-500\",\n    onClick: () => handleAnswerSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Click Here \")));\n};\n\nexport default ZombieMath;","map":{"version":3,"sources":["C:/Users/Noah Wotring/Desktop/Code/ReactUserDataPractice/my-app/src/pages/ZombieMath.js"],"names":["React","useState","userContext","useEffect","UserContext","ZombieMath","props","user","score","changeScore","activated","activatedGame","currentAnswer","changeAnswer","lifepoints","changeLifePoints","numberSet","genNumbers","num1","num2","answer","timeLeft","changeTime","generateNumbers","Math","floor","random","onChangeHandler","event","name","value","currentTarget","handleAnswerSubmit","toString","alert","document","querySelector","startGame","countDown","setTimeout"],"mappings":"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","sourcesContent":["import React, {useState,userContext,useEffect} from 'react';\r\nimport './zombie_math.css';\r\nimport {UserContext} from \"../providers/UserProvider\";\r\n\r\nconst ZombieMath = (props) => {\r\n  const user = props.user;\r\n  const [score,changeScore] = useState(0);\r\n  const [activated,activatedGame] = useState(false);\r\n  const [currentAnswer,changeAnswer] = useState(0);\r\n  const [lifepoints,changeLifePoints] = useState(5);\r\n  const [numberSet, genNumbers] = useState({\r\n    num1: null,\r\n    num2: null,\r\n    answer: null\r\n  });\r\n  const [timeLeft,changeTime] = useState(0);\r\n  const generateNumbers = () => {\r\n        let num1 = Math.floor(Math.random() * 100);\r\n        let num2 = Math.floor(Math.random() * 100);\r\n        let answer = num1 + num2;\r\n        genNumbers({\r\n          num1: num1,\r\n          num2: num2,\r\n          answer: answer\r\n        })\r\n      }\r\n  useEffect(() => {\r\n    generateNumbers();\r\n\r\n  },[])\r\n\r\n  const onChangeHandler = (event) => {\r\n    const {name,value} = event.currentTarget;\r\n    if(name === \"currentAnswer\"){\r\n      changeAnswer(value)\r\n    }\r\n  }\r\n\r\n  const handleAnswerSubmit = () => {\r\n    if(currentAnswer === numberSet.answer.toString()){\r\n      alert(\"correct\");\r\n      changeScore(score + 1);\r\n      changeAnswer(0)\r\n      generateNumbers();\r\n    } else {\r\n      alert(\"your answer was \" + document.querySelector('#answerAttempt').value  + \", which is FALSE, the current answer is \" + numberSet.answer)\r\n      generateNumbers();\r\n      changeAnswer(0);\r\n    }\r\n  }\r\n  const startGame = () => {\r\n    changeTime(10);\r\n\r\n    generateNumbers();\r\n    countDown();\r\n\r\n  }\r\n  const countDown = () => {\r\n    setTimeout(()=>{\r\n      changeTime(timeLeft-1)\r\n    },1000)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n      <div className=\"zombie_math_background text-center block\">\r\n        <h1> {timeLeft} </h1>\r\n\r\n       <h1> Hello, your score is <span className=\"bg-red-200 border-blue-300 border\">{score} </span> </h1>\r\n       <div className=\"bg-gray-400 w-1/2 h-32 container block my-auto mx-auto border border-red-200 relative\">\r\n        <div className=\"number container mx-0\">\r\n          <span className=\"num1 inline-block\">{numberSet.num1} </span> + <span className=\"num2\">{numberSet.num2} =\r\n          <input\r\n            type=\"answerAttempt\"\r\n            className=\"w-1/12 \"\r\n            name=\"currentAnswer\"\r\n            value={currentAnswer}\r\n            placeholder=\"\"\r\n            id=\"answerAttempt\"\r\n            onChange = {(event)=> onChangeHandler(event)}\r\n            /> </span>\r\n        </div>\r\n\r\n        <button className=\" absolute bottom-0 right-0 border border-blue-500\" onClick={() => handleAnswerSubmit() }>Click Here </button>\r\n       </div>\r\n\r\n\r\n\r\n        </div>\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ZombieMath;\r\n"]},"metadata":{},"sourceType":"module"}