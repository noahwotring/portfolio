{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBXlXcnnyTOWmI4SfdWPkpDOv6xfTlzG_0\",\n  authDomain: \"userdatabasepractice.firebaseapp.com\",\n  databaseURL: \"https://userdatabasepractice.firebaseio.com\",\n  projectId: \"userdatabasepractice\",\n  storageBucket: \"userdatabasepractice.appspot.com\",\n  messagingSenderId: \"418266214563\",\n  appId: \"1:418266214563:web:eb5e2878b6545093240f16\",\n  measurementId: \"G-B8CY4W80BN\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport default firebase;\nexport const session = firebase.auth.Auth.Persistence.SESSION;\nexport const local = firebase.auth.Auth.Persistence.LOCAL;\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      console.log(user);\n      await userRef.set({\n        user,\n        email,\n        displayName,\n        photoURL,\n        ...additionalData\n      });\n      console.log(displayName);\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\nexport const getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    userDocument.then(val => console.log(val));\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching data\", error);\n  }\n};\nexport const getAllUsers = async () => {\n  const usersRef = await firestore.collection('users');\n  let userNames = [];\n\n  try {\n    const userQuery = await usersRef.get();\n    userQuery.forEach(doc => {\n      userNames.push(doc.data().displayName);\n    });\n    return userNames;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const generateNonUserPage = async userName => {\n  const usersRef = await firestore.collection(`users`);\n\n  try {\n    const queryRef = await usersRef.where('displayName', '==', `${userName}`).get();\n    let pageOwnerDoc;\n    queryRef.forEach(doc => {\n      pageOwnerDoc = {\n        displayName: doc.data().displayName,\n        interests: doc.data().interests,\n        aboutMe: doc.data().aboutMe,\n        photoURL: doc.data().photoURL,\n        email: doc.data().email\n      };\n    });\n    return pageOwnerDoc;\n  } catch (e) {\n    console.log(e);\n  }\n}; // generating posts\n\nexport const generateNewsPosts = async (justOwned = false) => {\n  let collectedPosts = [];\n  const postsRef = firestore.collection('posts');\n\n  try {\n    const userPosts = await postsRef.get();\n    userPosts.forEach(doc => {\n      collectedPosts.push({\n        title: doc.data().title,\n        body: doc.data().body,\n        owner_id: doc.data().owner_id,\n        owner: doc.data().owner,\n        date_created: doc.data().date_created,\n        id: doc.id\n      });\n    });\n    console.log(collectedPosts.date);\n    return collectedPosts;\n  } catch (error) {\n    console.error(\"Error fetching data\", error);\n  }\n};\nexport const generateScore = async () => {\n  let allScores = [];\n  const scoresRef = firestore.collection('scores');\n\n  try {\n    const scores = await scoresRef.get();\n    scores.forEach(sc => {\n      allScores.push({\n        score: sc.data().score,\n        uid: sc.data().uid\n      });\n    });\n    return allScores;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateUserProfilePicture = async (uid, picURL) => {\n  if (!uid) return null;\n  console.log(\"successfull\");\n  const userRef = await firestore.doc(`users/${uid}`).update({\n    photoURL: picURL\n  });\n};\nexport const updateUserRep = async (uid, rep) => {\n  if (!uid) return null;\n  console.log('success');\n  const userRef = await firestore.doc(`users/${uid}`).update({\n    rep: rep\n  });\n};\nexport const updateUserDisplayName = async (uid, newDisplayName) => {\n  if (!uid) return null;\n  console.log(\"success\");\n  const userRef = await firestore.doc(`users/${uid}`).update({\n    displayName: newDisplayName\n  });\n};","map":{"version":3,"sources":["C:/Users/Noah Wotring/Desktop/Code/portfolio/src/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","provider","auth","GoogleAuthProvider","signInWithGoogle","signInWithPopup","firestore","session","Auth","Persistence","SESSION","local","LOCAL","generateUserDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","email","displayName","photoURL","console","log","set","error","getUserDocument","userDocument","then","val","data","getAllUsers","usersRef","collection","userNames","userQuery","forEach","push","e","generateNonUserPage","userName","queryRef","where","pageOwnerDoc","interests","aboutMe","generateNewsPosts","justOwned","collectedPosts","postsRef","userPosts","title","body","owner_id","owner","date_created","id","date","generateScore","allScores","scoresRef","scores","sc","score","updateUserProfilePicture","picURL","update","updateUserRep","rep","updateUserDisplayName","newDisplayName"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBXlXcnnyTOWmI4SfdWPkpDOv6xfTlzG_0\",\r\n    authDomain: \"userdatabasepractice.firebaseapp.com\",\r\n    databaseURL: \"https://userdatabasepractice.firebaseio.com\",\r\n    projectId: \"userdatabasepractice\",\r\n    storageBucket: \"userdatabasepractice.appspot.com\",\r\n    messagingSenderId: \"418266214563\",\r\n    appId: \"1:418266214563:web:eb5e2878b6545093240f16\",\r\n    measurementId: \"G-B8CY4W80BN\"\r\n  };\r\nfirebase.initializeApp(firebaseConfig);\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport default  firebase;\r\nexport const session = firebase.auth.Auth.Persistence.SESSION;\r\nexport const local  = firebase.auth.Auth.Persistence.LOCAL;\r\n\r\nexport const generateUserDocument = async (user,additionalData) => {\r\n    if(!user) return;\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if(!snapshot.exists) {\r\n      const {email,displayName,photoURL} = user;\r\n      try {\r\n        console.log(user);\r\n        await userRef.set({\r\n          user,\r\n          email,\r\n          displayName,\r\n          photoURL,\r\n          ...additionalData\r\n        });\r\n        console.log(displayName);\r\n      } catch (error) {\r\n        console.error(\"Error creating user document\", error);\r\n      }\r\n    }\r\n    return getUserDocument(user.uid);\r\n  };\r\n  export const getUserDocument = async uid => {\r\n    if(!uid) return null;\r\n    try {\r\n\r\n      const userDocument = await firestore.doc(`users/${uid}`).get();\r\n      userDocument.then((val) => console.log(val))\r\n      return {\r\n        uid,\r\n        ...userDocument.data()\r\n    };\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error)\r\n    }\r\n  };\r\n  export const getAllUsers = async () => {\r\n    const usersRef = await firestore.collection('users');\r\n    let userNames = [];\r\n    try {\r\n      const userQuery = await usersRef.get();\r\n      userQuery.forEach(doc => {\r\n        userNames.push(doc.data().displayName)\r\n      })\r\n      return userNames\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n    }\r\n  }\r\n  export const generateNonUserPage = async (userName) => {\r\n    const usersRef = await firestore.collection(`users`);\r\n    try {\r\n\r\n      const queryRef = await usersRef.where('displayName', '==', `${userName}`).get();\r\n\r\n      let pageOwnerDoc;\r\n      queryRef.forEach(doc => {\r\n        pageOwnerDoc = {\r\n          displayName: doc.data().displayName,\r\n          interests: doc.data().interests,\r\n          aboutMe: doc.data().aboutMe,\r\n          photoURL: doc.data().photoURL,\r\n          email: doc.data().email\r\n\r\n        }\r\n      })\r\n\r\n      return pageOwnerDoc\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n\r\n\r\n  }\r\n  // generating posts\r\n\r\n  export const generateNewsPosts = async (justOwned = false) => {\r\n    let collectedPosts = [];\r\n    const postsRef = firestore.collection('posts');\r\n\r\n\r\n    try {\r\n      const userPosts = await postsRef.get();\r\n      userPosts.forEach(doc => {\r\n        collectedPosts.push({title: doc.data().title,\r\n                              body: doc.data().body,\r\n                              owner_id: doc.data().owner_id,\r\n                              owner : doc.data().owner,\r\n                              date_created: doc.data().date_created,\r\n                              id: doc.id\r\n                            })\r\n      });\r\n      console.log(collectedPosts.date);\r\n      return collectedPosts;\r\n      } catch (error) {\r\n        console.error(\"Error fetching data\", error)\r\n      }\r\n    }\r\n  export const generateScore = async () => {\r\n    let allScores = [];\r\n    const scoresRef = firestore.collection('scores');\r\n    try {\r\n      const scores = await scoresRef.get();\r\n      scores.forEach(sc => {\r\n        allScores.push({\r\n          score: sc.data().score,\r\n          uid: sc.data().uid\r\n        });\r\n      });\r\n      return allScores;\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  export const updateUserProfilePicture = async (uid,picURL) => {\r\n    if(!uid) return null;\r\n    console.log(\"successfull\");\r\n    const userRef = await firestore.doc(`users/${uid}`).update({photoURL:picURL});\r\n  }\r\n  export const updateUserRep = async (uid,rep) => {\r\n    if(!uid) return null;\r\n    console.log('success');\r\n    const userRef = await firestore.doc(`users/${uid}`).update({rep: rep});\r\n  }\r\n  export const updateUserDisplayName = async (uid,newDisplayName) => {\r\n    if(!uid) return null;\r\n    console.log(\"success\");\r\n    const userRef = await firestore.doc(`users/${uid}`).update({displayName: newDisplayName});\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}