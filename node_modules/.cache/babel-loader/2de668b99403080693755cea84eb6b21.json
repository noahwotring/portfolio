{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noah Wotring\\\\Desktop\\\\Code\\\\ReactUserDataPractice\\\\my-app\\\\src\\\\pages\\\\ZombieMath.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport './zombie_math.css';\nimport { UserContext } from \"../providers/UserProvider\";\nimport { generateScore } from '../firebase.js';\n\nconst ZombieMath = props => {\n  const [gameIsRunning, setRunGame] = useState(false);\n  const [timeLeft, setTime] = useState(0);\n  const [timerIsRunning, setTimer] = useState(false);\n  const [score, changeScore] = useState(0);\n  const [currentAnswer, changeAnswer] = useState(\"\");\n  const [hp, setHealth] = useState(5);\n  const [numberSet, genNumbers] = useState({\n    num1: null,\n    num2: null,\n    answer: null\n  });\n  const user = useContext(UserContext);\n  const [allScores, updateAllScores] = useState([]);\n\n  const updateGenerateScores = () => {\n    generateScore().then(result => updateAllScores(result));\n    console.log(allScores);\n  };\n\n  useEffect(updateGenerateScores, []); //\n  //effect that checks game state, starts timer toggle on\n  // game is turned on\n\n  const activateGame = () => {\n    generateNumbers();\n    setHealth(5);\n    setTime(10);\n    setTimer(true);\n  };\n\n  useEffect(() => {\n    if (gameIsRunning) {\n      activateGame();\n    }\n  }, [gameIsRunning]); //countdown timer. after render/click/toggle game/toggle timer, this runs\n\n  useEffect(() => {\n    let interval = null;\n\n    if (timerIsRunning) {\n      interval = setInterval(() => {\n        setTime(timeLeft - 1);\n      }, 1000);\n    }\n\n    if (timerIsRunning && timeLeft === 0 && hp - 1 > 0) {\n      setHealth(hp - 1);\n      generateNumbers();\n      setTime(10);\n    }\n\n    if (hp === 0) {\n      clearInterval(interval);\n\n      if (user) {// send data + user\n      } else {// send data\n        }\n\n      setRunGame(false);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerIsRunning, timeLeft]); //number set generator\n\n  const generateNumbers = () => {\n    let num1 = Math.floor(Math.random() * 100);\n    let num2 = Math.floor(Math.random() * 100);\n    let answer = num1 + num2;\n    genNumbers({\n      num1: num1,\n      num2: num2,\n      answer: answer\n    });\n  };\n\n  const toggleGame = () => {\n    if (gameIsRunning === false) {\n      setRunGame(!gameIsRunning);\n    } else {\n      setRunGame(!gameIsRunning);\n    }\n  };\n\n  useEffect(() => {\n    if (gameIsRunning) {\n      let theWidth = hp * 20;\n      document.querySelector('.health').style.width = `${theWidth}%`;\n    }\n  }, [hp]);\n\n  const onChangeHandler = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n\n    if (name === \"currentAnswer\") {\n      changeAnswer(value);\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    if (currentAnswer === numberSet.answer.toString()) {\n      changeScore(score + 1);\n      setTime(10);\n      generateNumbers();\n      changeAnswer(\"\");\n    } else {\n      setHealth(hp - 1);\n      setTime(10);\n      document.querySelector('.problemBlock').classList.add('hit');\n      document.querySelector('.problemBlock').addEventListener('transitionend', removeTransition);\n      generateNumbers();\n      changeAnswer(\"\");\n    }\n  };\n\n  const handleKeyDown = e => {\n    console.log(e.key);\n\n    if (e.key === \"Enter\") {\n      handleAnswerSubmit();\n    }\n  };\n\n  const removeTransition = e => {\n    e.target.classList.remove('hit');\n  }; //the containers\n\n\n  const numberContainer = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"number container mx-0 problemBlock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"healthbar health\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, hp * 20, \"% \"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"block text-6xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"num1 numblock inline-block text-6xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 41\n    }\n  }, numberSet.num1, \" \"), \" + \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"num2 numblock text-6xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 122\n    }\n  }, numberSet.num2, \" =\", /*#__PURE__*/React.createElement(\"input\", {\n    autoFocus: true,\n    onKeyDown: e => {\n      handleKeyDown(e);\n    },\n    autocomplete: \"off\",\n    type: \"integer\",\n    className: \"w-1/12 text-black  \",\n    name: \"currentAnswer\",\n    value: currentAnswer,\n    placeholder: \"\",\n    id: \"answerAttempt\",\n    onChange: event => onChangeHandler(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), \" \"))); //<div className=\"bg-gray-400 w-1/2 h-32 container block my-auto mx-auto border border-red-200 relative\"> </div>\n\n  const startButtonContainer = /*#__PURE__*/React.createElement(\"button\", {\n    className: \" absolute bottom-0 right-0 border border-blue-500\",\n    onClick: toggleGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, \"Start Game \");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"zombie_math_background text-center inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \" \", timeLeft, \" \", hp, \" \"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 8\n    }\n  }, \" Hello, your score is \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"bg-red-200 border-blue-300 border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 34\n    }\n  }, score, \" \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"problemBlock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 8\n    }\n  }, gameIsRunning ? numberContainer : startButtonContainer, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"  border border-blue-500\",\n    onClick: gameIsRunning ? () => handleAnswerSubmit() : toggleGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, \"Click Here \")));\n};\n\nexport default ZombieMath;","map":{"version":3,"sources":["C:/Users/Noah Wotring/Desktop/Code/ReactUserDataPractice/my-app/src/pages/ZombieMath.js"],"names":["React","useState","useContext","useEffect","UserContext","generateScore","ZombieMath","props","gameIsRunning","setRunGame","timeLeft","setTime","timerIsRunning","setTimer","score","changeScore","currentAnswer","changeAnswer","hp","setHealth","numberSet","genNumbers","num1","num2","answer","user","allScores","updateAllScores","updateGenerateScores","then","result","console","log","activateGame","generateNumbers","interval","setInterval","clearInterval","Math","floor","random","toggleGame","theWidth","document","querySelector","style","width","onChangeHandler","event","name","value","currentTarget","handleAnswerSubmit","toString","classList","add","addEventListener","removeTransition","handleKeyDown","e","key","target","remove","numberContainer","startButtonContainer"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect} from 'react';\r\nimport './zombie_math.css';\r\nimport {UserContext} from \"../providers/UserProvider\";\r\nimport {generateScore} from '../firebase.js';\r\n\r\nconst ZombieMath = (props) => {\r\n  const [gameIsRunning, setRunGame] = useState(false);\r\n  const [timeLeft,setTime] = useState(0);\r\n  const [timerIsRunning,setTimer] = useState(false);\r\n  const [score,changeScore] = useState(0);\r\n  const [currentAnswer,changeAnswer] = useState(\"\");\r\n  const [hp,setHealth] = useState(5);\r\n  const [numberSet, genNumbers] = useState({\r\n    num1: null,\r\n    num2: null,\r\n    answer: null\r\n  });\r\n  const user = useContext(UserContext);\r\n  const [allScores,updateAllScores] = useState([]);\r\n  const updateGenerateScores = () => {\r\n    generateScore().then(result => updateAllScores(result));\r\n    console.log(allScores);\r\n  }\r\n  useEffect(updateGenerateScores,[])\r\n\r\n  //\r\n\r\n  //effect that checks game state, starts timer toggle on\r\n  // game is turned on\r\n  const activateGame = () => {\r\n    generateNumbers()\r\n    setHealth(5);\r\n    setTime(10);\r\n    setTimer(true)\r\n  }\r\n    useEffect(() => {\r\n      if(gameIsRunning){\r\n      activateGame()\r\n      }\r\n    },[gameIsRunning])\r\n  //countdown timer. after render/click/toggle game/toggle timer, this runs\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if(timerIsRunning){\r\n      interval = setInterval(() => {\r\n        setTime(timeLeft - 1)\r\n      }, 1000)\r\n    }\r\n    if (timerIsRunning && timeLeft === 0 && (hp - 1) > 0){\r\n      setHealth(hp-1);\r\n      generateNumbers();\r\n      setTime(10);\r\n    }\r\n    if(hp === 0){\r\n      clearInterval(interval);\r\n      if(user){\r\n        // send data + user\r\n\r\n      } else {\r\n        // send data\r\n      }\r\n      setRunGame(false);\r\n\r\n    }\r\n    return () => clearInterval(interval);\r\n  },[timerIsRunning,timeLeft]);\r\n\r\n//number set generator\r\n  const generateNumbers = () => {\r\n        let num1 = Math.floor(Math.random() * 100);\r\n        let num2 = Math.floor(Math.random() * 100);\r\n        let answer = num1 + num2;\r\n        genNumbers({\r\n          num1: num1,\r\n          num2: num2,\r\n          answer: answer\r\n        })\r\n  }\r\n\r\n  const toggleGame = () => {\r\n      if(gameIsRunning === false){\r\n        setRunGame(!gameIsRunning)\r\n      } else {\r\n        setRunGame(!gameIsRunning)\r\n      }\r\n    }\r\n\r\n  useEffect(() => {\r\n    if(gameIsRunning){\r\n      let theWidth = hp * 20;\r\n      document.querySelector('.health').style.width = `${theWidth}%`;\r\n    }\r\n\r\n  },[hp])\r\n\r\n\r\n  const onChangeHandler = (event) => {\r\n    const {name,value} = event.currentTarget;\r\n    if(name === \"currentAnswer\"){\r\n      changeAnswer(value)\r\n    }\r\n  }\r\n\r\n  const handleAnswerSubmit = () => {\r\n    if(currentAnswer === numberSet.answer.toString()){\r\n      changeScore(score + 1);\r\n      setTime(10);\r\n      generateNumbers();\r\n      changeAnswer(\"\");\r\n    } else {\r\n      setHealth(hp-1);\r\n      setTime(10);\r\n      document.querySelector('.problemBlock').classList.add('hit');\r\n      document.querySelector('.problemBlock').addEventListener('transitionend', removeTransition);\r\n      generateNumbers();\r\n      changeAnswer(\"\");\r\n    }\r\n  }\r\n\r\n  const handleKeyDown = (e) => {\r\n    console.log(e.key)\r\n    if (e.key === \"Enter\"){\r\n      handleAnswerSubmit();\r\n    }\r\n  }\r\n  const removeTransition = (e) => {\r\n     e.target.classList.remove('hit')\r\n  }\r\n\r\n\r\n\r\n  //the containers\r\n  const numberContainer =\r\n    <div className=\"number container mx-0 problemBlock\">\r\n    <span className=\"healthbar health\">{hp * 20}% </span>\r\n      <span className=\"block text-6xl\"> <span className=\"num1 numblock inline-block text-6xl\">{numberSet.num1} </span> + <span className=\"num2 numblock text-6xl\">{numberSet.num2} =\r\n      <input\r\n\r\n        autoFocus\r\n        onKeyDown={e=>{handleKeyDown(e)}}\r\n        autocomplete=\"off\"\r\n        type=\"integer\"\r\n        className=\"w-1/12 text-black  \"\r\n        name=\"currentAnswer\"\r\n        value={currentAnswer}\r\n        placeholder=\"\"\r\n        id=\"answerAttempt\"\r\n        onChange = {(event)=> onChangeHandler(event)}\r\n        /> </span>\r\n      </span>\r\n      </div>\r\n      //<div className=\"bg-gray-400 w-1/2 h-32 container block my-auto mx-auto border border-red-200 relative\"> </div>\r\n\r\n      const startButtonContainer =\r\n      <button className=\" absolute bottom-0 right-0 border border-blue-500\" onClick={toggleGame}>Start Game </button>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n      <div className=\"zombie_math_background text-center inline\">\r\n        <h1> {timeLeft} {hp} </h1>\r\n\r\n       <h1> Hello, your score is <span className=\"bg-red-200 border-blue-300 border\">{score} </span> </h1>\r\n       <div className=\"problemBlock\">\r\n        {gameIsRunning? numberContainer : startButtonContainer}\r\n\r\n        <button className=\"  border border-blue-500\" onClick={gameIsRunning? () => handleAnswerSubmit() : toggleGame }>Click Here </button>\r\n        </div>\r\n\r\n       </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ZombieMath;\r\n"]},"metadata":{},"sourceType":"module"}