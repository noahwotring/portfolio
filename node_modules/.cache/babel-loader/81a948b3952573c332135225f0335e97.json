{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBXlXcnnyTOWmI4SfdWPkpDOv6xfTlzG_0\",\n  authDomain: \"userdatabasepractice.firebaseapp.com\",\n  databaseURL: \"https://userdatabasepractice.firebaseio.com\",\n  projectId: \"userdatabasepractice\",\n  storageBucket: \"userdatabasepractice.appspot.com\",\n  messagingSenderId: \"418266214563\",\n  appId: \"1:418266214563:web:9ce60da2e5058420240f16\",\n  measurementId: \"G-V2MBD55547\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nconst signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nconst generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      displayName\n    };\n  } catch (error) {\n    console.error(\"Error fetching data\", error);\n  }\n};\n\nexport { generateUserDocument, auth, signInWithGoogle };","map":{"version":3,"sources":["C:/Users/Noah Wotring/Desktop/Code/ReactUserDataPractice/my-app/src/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","provider","auth","GoogleAuthProvider","signInWithGoogle","signInWithPopup","firestore","generateUserDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","email","displayName","photoURL","set","error","console","getUserDocument","userDocument"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAE,yCADS;AAEjBC,EAAAA,UAAU,EAAE,sCAFK;AAGjBC,EAAAA,WAAW,EAAE,6CAHI;AAIjBC,EAAAA,SAAS,EAAE,sBAJM;AAKjBC,EAAAA,aAAa,EAAE,kCALE;AAMjBC,EAAAA,iBAAiB,EAAE,cANF;AAOjBC,EAAAA,KAAK,EAAE,2CAPU;AAQjBC,EAAAA,aAAa,EAAE;AARE,CAArB;AAUAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB;AACA,MAAMU,QAAQ,GAAG,IAAIX,QAAQ,CAACY,IAAT,CAAcC,kBAAlB,EAAjB;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAC7BF,EAAAA,IAAI,CAACG,eAAL,CAAqBJ,QAArB;AACD,CAFD;;AAGA,MAAMC,IAAI,GAAGZ,QAAQ,CAACY,IAAT,EAAb;AACA,MAAMI,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;;AAIE,MAAMC,oBAAoB,GAAG,OAAOC,IAAP,EAAaC,cAAb,KAAgC;AAC3D,MAAG,CAACD,IAAJ,EAAU;AACV,QAAME,OAAO,GAAGJ,SAAS,CAACK,GAAV,CAAe,SAAQH,IAAI,CAACI,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACnB,UAAM;AAACC,MAAAA,KAAD;AAAOC,MAAAA,WAAP;AAAmBC,MAAAA;AAAnB,QAA+BV,IAArC;;AACA,QAAI;AACF,YAAME,OAAO,CAACS,GAAR,CAAY;AAChBF,QAAAA,WADgB;AAEhBD,QAAAA,KAFgB;AAGhBE,QAAAA;AAHgB,OAAZ,CAAN;AAKD,KAND,CAME,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;;AACD,SAAOE,eAAe,CAACd,IAAI,CAACI,GAAN,CAAtB;AACD,CAjBD;;AAkBA,MAAMU,eAAe,GAAG,MAAMV,GAAN,IAAa;AACnC,MAAG,CAACA,GAAJ,EAAS,OAAO,IAAP;;AACT,MAAI;AACF,UAAMW,YAAY,GAAG,MAAMjB,SAAS,CAACK,GAAV,CAAe,SAAQC,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACLF,MAAAA,GADK;AAELK,MAAAA;AAFK,KAAP;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;AACF,CAXD;;AAaF,SAAQb,oBAAR,EAA8BL,IAA9B,EAAoCE,gBAApC","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBXlXcnnyTOWmI4SfdWPkpDOv6xfTlzG_0\",\r\n    authDomain: \"userdatabasepractice.firebaseapp.com\",\r\n    databaseURL: \"https://userdatabasepractice.firebaseio.com\",\r\n    projectId: \"userdatabasepractice\",\r\n    storageBucket: \"userdatabasepractice.appspot.com\",\r\n    messagingSenderId: \"418266214563\",\r\n    appId: \"1:418266214563:web:9ce60da2e5058420240f16\",\r\n    measurementId: \"G-V2MBD55547\"\r\n  };\r\nfirebase.initializeApp(firebaseConfig);\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\n\r\n\r\n  const generateUserDocument = async (user, additionalData) => {\r\n    if(!user) return;\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if(!snapshot.exists) {\r\n      const {email,displayName,photoURL} = user;\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          photoURL\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error creating user document\", error);\r\n      }\r\n    }\r\n    return getUserDocument(user.uid);\r\n  };\r\n  const getUserDocument = async uid => {\r\n    if(!uid) return null;\r\n    try {\r\n      const userDocument = await firestore.doc(`users/${uid}`).get();\r\n      return {\r\n        uid,\r\n        displayName\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error)\r\n    }\r\n  };\r\n\r\nexport {generateUserDocument, auth, signInWithGoogle};\r\n"]},"metadata":{},"sourceType":"module"}