'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var reactNative = require('react-native');
var React = _interopDefault(require('react'));

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/**
 * Tailwind default config 1.2.0
 * https://github.com/tailwindcss/tailwindcss/blob/61e5ac5f98468decf453711bcfa9460752f1ba27/stubs/defaultConfig.stub.js
 */

var config = {
  prefix: "",
  important: false,
  separator: ":",
  theme: {
    screens: {
      sm: "640px",
      md: "768px",
      lg: "1024px",
      xl: "1280px"
    },
    colors: {
      transparent: "transparent",

      black: "#000",
      white: "#fff",

      gray: {
        100: "#f7fafc",
        200: "#edf2f7",
        300: "#e2e8f0",
        400: "#cbd5e0",
        500: "#a0aec0",
        600: "#718096",
        700: "#4a5568",
        800: "#2d3748",
        900: "#1a202c"
      },
      red: {
        100: "#fff5f5",
        200: "#fed7d7",
        300: "#feb2b2",
        400: "#fc8181",
        500: "#f56565",
        600: "#e53e3e",
        700: "#c53030",
        800: "#9b2c2c",
        900: "#742a2a"
      },
      orange: {
        100: "#fffaf0",
        200: "#feebc8",
        300: "#fbd38d",
        400: "#f6ad55",
        500: "#ed8936",
        600: "#dd6b20",
        700: "#c05621",
        800: "#9c4221",
        900: "#7b341e"
      },
      yellow: {
        100: "#fffff0",
        200: "#fefcbf",
        300: "#faf089",
        400: "#f6e05e",
        500: "#ecc94b",
        600: "#d69e2e",
        700: "#b7791f",
        800: "#975a16",
        900: "#744210"
      },
      green: {
        100: "#f0fff4",
        200: "#c6f6d5",
        300: "#9ae6b4",
        400: "#68d391",
        500: "#48bb78",
        600: "#38a169",
        700: "#2f855a",
        800: "#276749",
        900: "#22543d"
      },
      teal: {
        100: "#e6fffa",
        200: "#b2f5ea",
        300: "#81e6d9",
        400: "#4fd1c5",
        500: "#38b2ac",
        600: "#319795",
        700: "#2c7a7b",
        800: "#285e61",
        900: "#234e52"
      },
      blue: {
        100: "#ebf8ff",
        200: "#bee3f8",
        300: "#90cdf4",
        400: "#63b3ed",
        500: "#4299e1",
        600: "#3182ce",
        700: "#2b6cb0",
        800: "#2c5282",
        900: "#2a4365"
      },
      indigo: {
        100: "#ebf4ff",
        200: "#c3dafe",
        300: "#a3bffa",
        400: "#7f9cf5",
        500: "#667eea",
        600: "#5a67d8",
        700: "#4c51bf",
        800: "#434190",
        900: "#3c366b"
      },
      purple: {
        100: "#faf5ff",
        200: "#e9d8fd",
        300: "#d6bcfa",
        400: "#b794f4",
        500: "#9f7aea",
        600: "#805ad5",
        700: "#6b46c1",
        800: "#553c9a",
        900: "#44337a"
      },
      pink: {
        100: "#fff5f7",
        200: "#fed7e2",
        300: "#fbb6ce",
        400: "#f687b3",
        500: "#ed64a6",
        600: "#d53f8c",
        700: "#b83280",
        800: "#97266d",
        900: "#702459"
      }
    },
    spacing: {
      px: "1px",
      "0": "0",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "8": "2rem",
      "10": "2.5rem",
      "12": "3rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "32": "8rem",
      "40": "10rem",
      "48": "12rem",
      "56": "14rem",
      "64": "16rem"
    },
    backgroundColor: function backgroundColor(theme) {
      return theme("colors");
    },
    backgroundPosition: {
      bottom: "bottom",
      center: "center",
      left: "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      right: "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      top: "top"
    },
    backgroundSize: {
      auto: "auto",
      cover: "cover",
      contain: "contain"
    },
    borderColor: function borderColor(theme) {
      return _extends({}, theme("colors"), {
        default: theme("colors.gray.300", "currentColor")
      });
    },
    borderRadius: {
      none: "0",
      sm: "0.125rem",
      default: "0.25rem",
      md: "0.375rem",
      lg: "0.5rem",
      full: "9999px"
    },
    borderWidth: {
      default: "1px",
      "0": "0",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    boxShadow: {
      xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
      sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
      default: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
      md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
      lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
      xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
      "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
      inner: "inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)",
      outline: "0 0 0 3px rgba(66, 153, 225, 0.5)",
      none: "none"
    },
    container: {},
    cursor: {
      auto: "auto",
      default: "default",
      pointer: "pointer",
      wait: "wait",
      text: "text",
      move: "move",
      "not-allowed": "not-allowed"
    },
    fill: {
      current: "currentColor"
    },
    flex: {
      "1": "1 1 0%",
      auto: "1 1 auto",
      initial: "0 1 auto",
      none: "none"
    },
    flexGrow: {
      "0": "0",
      default: "1"
    },
    flexShrink: {
      "0": "0",
      default: "1"
    },
    fontFamily: {
      sans: ["system-ui", "-apple-system", "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "Noto Sans", "sans-serif", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"],
      serif: ["Georgia", "Cambria", "Times New Roman", "Times", "serif"],
      mono: ["Menlo", "Monaco", "Consolas", "Liberation Mono", "Courier New", "monospace"]
    },
    fontSize: {
      xs: "0.75rem",
      sm: "0.875rem",
      base: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem",
      "5xl": "3rem",
      "6xl": "4rem"
    },
    fontWeight: {
      hairline: "100",
      thin: "200",
      light: "300",
      normal: "400",
      medium: "500",
      semibold: "600",
      bold: "700",
      extrabold: "800",
      black: "900"
    },
    height: function height(theme) {
      return _extends({
        auto: "auto"
      }, theme("spacing"), {
        full: "100%",
        screen: "100vh"
      });
    },
    inset: {
      "0": "0",
      auto: "auto"
    },
    letterSpacing: {
      tighter: "-0.05em",
      tight: "-0.025em",
      normal: "0",
      wide: "0.025em",
      wider: "0.05em",
      widest: "0.1em"
    },
    lineHeight: {
      none: "1",
      tight: "1.25",
      snug: "1.375",
      normal: "1.5",
      relaxed: "1.625",
      loose: "2",
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem"
    },
    listStyleType: {
      none: "none",
      disc: "disc",
      decimal: "decimal"
    },
    margin: function margin(theme, _ref) {
      var negative = _ref.negative;
      return _extends({
        auto: "auto"
      }, theme("spacing"), negative(theme("spacing")));
    },
    maxHeight: {
      full: "100%",
      screen: "100vh"
    },
    maxWidth: function maxWidth(theme, _ref2) {
      var breakpoints = _ref2.breakpoints;
      return _extends({
        none: "none",
        xs: "20rem",
        sm: "24rem",
        md: "28rem",
        lg: "32rem",
        xl: "36rem",
        "2xl": "42rem",
        "3xl": "48rem",
        "4xl": "56rem",
        "5xl": "64rem",
        "6xl": "72rem",
        full: "100%"
      }, breakpoints(theme("screens")));
    },
    minHeight: {
      "0": "0",
      full: "100%",
      screen: "100vh"
    },
    minWidth: {
      "0": "0",
      full: "100%"
    },
    objectPosition: {
      bottom: "bottom",
      center: "center",
      left: "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      right: "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      top: "top"
    },
    opacity: {
      "0": "0",
      "25": "0.25",
      "50": "0.5",
      "75": "0.75",
      "100": "1"
    },
    order: {
      first: "-9999",
      last: "9999",
      none: "0",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12"
    },
    padding: function padding(theme) {
      return theme("spacing");
    },
    placeholderColor: function placeholderColor(theme) {
      return theme("colors");
    },
    stroke: {
      current: "currentColor"
    },
    strokeWidth: {
      "0": "0",
      "1": "1",
      "2": "2"
    },
    textColor: function textColor(theme) {
      return theme("colors");
    },
    width: function width(theme) {
      return _extends({
        auto: "auto"
      }, theme("spacing"), {
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        "1/5": "20%",
        "2/5": "40%",
        "3/5": "60%",
        "4/5": "80%",
        "1/6": "16.666667%",
        "2/6": "33.333333%",
        "3/6": "50%",
        "4/6": "66.666667%",
        "5/6": "83.333333%",
        "1/12": "8.333333%",
        "2/12": "16.666667%",
        "3/12": "25%",
        "4/12": "33.333333%",
        "5/12": "41.666667%",
        "6/12": "50%",
        "7/12": "58.333333%",
        "8/12": "66.666667%",
        "9/12": "75%",
        "10/12": "83.333333%",
        "11/12": "91.666667%",
        full: "100%",
        screen: "100vw"
      });
    },
    zIndex: {
      auto: "auto",
      "0": "0",
      "10": "10",
      "20": "20",
      "30": "30",
      "40": "40",
      "50": "50"
    },
    gap: function gap(theme) {
      return theme("spacing");
    },
    gridTemplateColumns: {
      none: "none",
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "7": "repeat(7, minmax(0, 1fr))",
      "8": "repeat(8, minmax(0, 1fr))",
      "9": "repeat(9, minmax(0, 1fr))",
      "10": "repeat(10, minmax(0, 1fr))",
      "11": "repeat(11, minmax(0, 1fr))",
      "12": "repeat(12, minmax(0, 1fr))"
    },
    gridColumn: {
      auto: "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-7": "span 7 / span 7",
      "span-8": "span 8 / span 8",
      "span-9": "span 9 / span 9",
      "span-10": "span 10 / span 10",
      "span-11": "span 11 / span 11",
      "span-12": "span 12 / span 12"
    },
    gridColumnStart: {
      auto: "auto",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13"
    },
    gridColumnEnd: {
      auto: "auto",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13"
    },
    gridTemplateRows: {
      none: "none",
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))"
    },
    gridRow: {
      auto: "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6"
    },
    gridRowStart: {
      auto: "auto",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7"
    },
    gridRowEnd: {
      auto: "auto",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7"
    },
    transformOrigin: {
      center: "center",
      top: "top",
      "top-right": "top right",
      right: "right",
      "bottom-right": "bottom right",
      bottom: "bottom",
      "bottom-left": "bottom left",
      left: "left",
      "top-left": "top left"
    },
    scale: {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5"
    },
    rotate: {
      "-180": "-180deg",
      "-90": "-90deg",
      "-45": "-45deg",
      "0": "0",
      "45": "45deg",
      "90": "90deg",
      "180": "180deg"
    },
    translate: function translate(theme, _ref3) {
      var negative = _ref3.negative;
      return _extends({}, theme("spacing"), negative(theme("spacing")), {
        "-full": "-100%",
        "-1/2": "-50%",
        "1/2": "50%",
        full: "100%"
      });
    },
    skew: {
      "-12": "-12deg",
      "-6": "-6deg",
      "-3": "-3deg",
      "0": "0",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg"
    },
    transitionProperty: {
      none: "none",
      all: "all",
      default: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
      colors: "background-color, border-color, color, fill, stroke",
      opacity: "opacity",
      shadow: "box-shadow",
      transform: "transform"
    },
    transitionTimingFunction: {
      linear: "linear",
      in: "cubic-bezier(0.4, 0, 1, 1)",
      out: "cubic-bezier(0, 0, 0.2, 1)",
      "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
    },
    transitionDuration: {
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms"
    }
  },
  variants: {
    accessibility: ["responsive", "focus"],
    alignContent: ["responsive"],
    alignItems: ["responsive"],
    alignSelf: ["responsive"],
    appearance: ["responsive"],
    backgroundAttachment: ["responsive"],
    backgroundColor: ["responsive", "hover", "focus"],
    backgroundPosition: ["responsive"],
    backgroundRepeat: ["responsive"],
    backgroundSize: ["responsive"],
    borderCollapse: ["responsive"],
    borderColor: ["responsive", "hover", "focus"],
    borderRadius: ["responsive"],
    borderStyle: ["responsive"],
    borderWidth: ["responsive"],
    boxShadow: ["responsive", "hover", "focus"],
    boxSizing: ["responsive"],
    cursor: ["responsive"],
    display: ["responsive"],
    fill: ["responsive"],
    flex: ["responsive"],
    flexDirection: ["responsive"],
    flexGrow: ["responsive"],
    flexShrink: ["responsive"],
    flexWrap: ["responsive"],
    float: ["responsive"],
    clear: ["responsive"],
    fontFamily: ["responsive"],
    fontSize: ["responsive"],
    fontSmoothing: ["responsive"],
    fontStyle: ["responsive"],
    fontWeight: ["responsive", "hover", "focus"],
    height: ["responsive"],
    inset: ["responsive"],
    justifyContent: ["responsive"],
    letterSpacing: ["responsive"],
    lineHeight: ["responsive"],
    listStylePosition: ["responsive"],
    listStyleType: ["responsive"],
    margin: ["responsive"],
    maxHeight: ["responsive"],
    maxWidth: ["responsive"],
    minHeight: ["responsive"],
    minWidth: ["responsive"],
    objectFit: ["responsive"],
    objectPosition: ["responsive"],
    opacity: ["responsive", "hover", "focus"],
    order: ["responsive"],
    outline: ["responsive", "focus"],
    overflow: ["responsive"],
    padding: ["responsive"],
    placeholderColor: ["responsive", "focus"],
    pointerEvents: ["responsive"],
    position: ["responsive"],
    resize: ["responsive"],
    stroke: ["responsive"],
    strokeWidth: ["responsive"],
    tableLayout: ["responsive"],
    textAlign: ["responsive"],
    textColor: ["responsive", "hover", "focus"],
    textDecoration: ["responsive", "hover", "focus"],
    textTransform: ["responsive"],
    userSelect: ["responsive"],
    verticalAlign: ["responsive"],
    visibility: ["responsive"],
    whitespace: ["responsive"],
    width: ["responsive"],
    wordBreak: ["responsive"],
    zIndex: ["responsive"],
    gap: ["responsive"],
    gridAutoFlow: ["responsive"],
    gridTemplateColumns: ["responsive"],
    gridColumn: ["responsive"],
    gridColumnStart: ["responsive"],
    gridColumnEnd: ["responsive"],
    gridTemplateRows: ["responsive"],
    gridRow: ["responsive"],
    gridRowStart: ["responsive"],
    gridRowEnd: ["responsive"],
    transform: ["responsive"],
    transformOrigin: ["responsive"],
    scale: ["responsive", "hover", "focus"],
    rotate: ["responsive", "hover", "focus"],
    translate: ["responsive", "hover", "focus"],
    skew: ["responsive", "hover", "focus"],
    transitionProperty: ["responsive"],
    transitionTimingFunction: ["responsive"],
    transitionDuration: ["responsive"]
  },
  corePlugins: {},
  plugins: []
};

var styles = {};

Object.entries(config.theme.colors).forEach(function (_ref) {
  var _ref2 = slicedToArray(_ref, 2),
      colorName = _ref2[0],
      colorValues = _ref2[1];

  if (typeof colorValues === "string") {
    styles["border-" + colorName] = { borderColor: colorValues };
    styles["bg-" + colorName] = { backgroundColor: colorValues };
    styles["text-" + colorName] = { color: colorValues };
    return;
  }
  Object.entries(colorValues).forEach(function (_ref3) {
    var _ref4 = slicedToArray(_ref3, 2),
        gradientIndex = _ref4[0],
        hexValue = _ref4[1];

    styles["border-" + colorName + "-" + gradientIndex] = { borderColor: hexValue };
    styles["bg-" + colorName + "-" + gradientIndex] = { backgroundColor: hexValue };
    styles["text-" + colorName + "-" + gradientIndex] = { color: hexValue };
  });
});

var styles$1 = {};

Object.entries(config.theme.borderRadius).forEach(function (_ref) {
  var _ref2 = slicedToArray(_ref, 2),
      key = _ref2[0],
      val = _ref2[1];

  var suffix = key === "default" ? "" : "-" + key;
  var value = typeof val === "string" && val.includes("rem") ? parseFloat(val) * 16 : parseFloat(val);
  styles$1["rounded" + suffix] = { borderRadius: value };
  styles$1["rounded-t" + suffix] = {
    borderTopLeftRadius: value,
    borderTopRightRadius: value
  };
  styles$1["rounded-r" + suffix] = {
    borderTopRightRadius: value,
    borderBottomRightRadius: value
  };
  styles$1["rounded-b" + suffix] = {
    borderBottomLeftRadius: value,
    borderBottomRightRadius: value
  };
  styles$1["rounded-l" + suffix] = {
    borderBottomLeftRadius: value,
    borderTopLeftRadius: value
  };
  styles$1["rounded-tr" + suffix] = { borderTopRightRadius: value };
  styles$1["rounded-br" + suffix] = { borderBottomRightRadius: value };
  styles$1["rounded-bl" + suffix] = { borderBottomLeftRadius: value };
  styles$1["rounded-tl" + suffix] = { borderTopLeftRadius: value };
});

console.log({ styles: styles$1 });

var style = {
  "border-solid": {
    borderStyle: "solid"
  },
  "border-dashed": {
    borderStyle: "dashed"
  },
  "border-dotted": {
    borderStyle: "dotted"
  }
};

var styles$2 = {};

Object.entries(config.theme.borderWidth).forEach(function (_ref) {
  var _ref2 = slicedToArray(_ref, 2),
      key = _ref2[0],
      val = _ref2[1];

  var suffix = key === "default" ? "" : "-" + key;
  var value = parseInt(val);
  styles$2["border" + suffix] = { borderWidth: value };
  styles$2["border-t" + suffix] = { borderTopWidth: value };
  styles$2["border-r" + suffix] = { borderRightWidth: value };
  styles$2["border-b" + suffix] = { borderBottomWidth: value };
  styles$2["border-l" + suffix] = { borderLeftWidth: value };
});

var styles$3 = {};

["0", "auto"].forEach(function (variation) {
  var value = variation === "auto" ? variation : parseInt(variation);
  styles$3["inset-" + variation] = {
    top: value,
    right: value,
    bottom: value,
    left: value
  };
  styles$3["inset-y-" + variation] = {
    top: value,
    bottom: value
  };
  styles$3["inset-x-" + variation] = {
    right: value,
    left: value
  };
  styles$3["top-" + variation] = { top: value };
  styles$3["right-" + variation] = { right: value };
  styles$3["bottom-" + variation] = { bottom: value };
  styles$3["left-" + variation] = { left: value };
});

var position = _extends({
  relative: { position: "relative" },
  absolute: { position: "absolute" }
}, styles$3);

var makeSpace = function makeSpace() {
  var negative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var styles = {};
  Object.keys(_extends({}, config.theme.spacing, { auto: "auto" })).forEach(function (key) {
    var value = 1;
    var prefix = "";
    if (key === "auto") {
      value = "auto";
    } else if (key !== "px") value = parseFloat(key) * 4;

    if (negative && value === ("auto")) return;

    if (negative) {
      prefix = "-";
      value = parseFloat("-" + value);
    }

    styles[prefix + "m-" + key] = { margin: value };
    styles[prefix + "mx-" + key] = { marginLeft: value, marginRight: value };
    styles[prefix + "my-" + key] = { marginTop: value, marginBottom: value };
    styles[prefix + "mt-" + key] = { marginTop: value };
    styles[prefix + "mr-" + key] = { marginRight: value };
    styles[prefix + "mb-" + key] = { marginBottom: value };
    styles[prefix + "ml-" + key] = { marginLeft: value };

    if (!negative) {
      styles["p-" + key] = { padding: value };
      styles["px-" + key] = {
        paddingLeft: value,
        paddingRight: value
      };
      styles["py-" + key] = {
        paddingTop: value,
        paddingBottom: value
      };
      styles["pt-" + key] = { paddingTop: value };
      styles["pr-" + key] = { paddingRight: value };
      styles["pb-" + key] = { paddingBottom: value };
      styles["pl-" + key] = { paddingLeft: value };
    }
  });
  return styles;
};

var spacing = _extends({}, makeSpace(), makeSpace(true));

// TODO: facilitate theming
var getSpacing = function getSpacing() {
  var spacing = {};
  Object.keys(config.theme.spacing).forEach(function (key) {
    if (key === "px") return;
    spacing[key] = parseFloat(key) * 4;
  });
  return spacing;
};

var widths = config.theme.width(getSpacing);
var styles$4 = {};

Object.entries(widths).forEach(function (_ref) {
  var _ref2 = slicedToArray(_ref, 2),
      key = _ref2[0],
      val = _ref2[1];

  styles$4["w-" + key] = { width: val };
});

var styles$5 = {
  "flex-row": {
    flexDirection: "row"
  },
  "flex-row-reverse": {
    flexDirection: "row-reverse"
  },
  "flex-col": {
    flexDirection: "column"
  },
  "flex-col-reverse": {
    flexDirection: "column-reverse"
  },
  "flex-wrap": {
    flexWrap: "wrap"
  },
  "flex-no-wrap": {
    flexWrap: "nowrap"
  },
  "items-start": {
    alignItems: "flex-start"
  },
  "items-end": {
    alignItems: "flex-end"
  },
  "items-center": {
    alignItems: "center"
  },
  "items-baseline": {
    alignItems: "baseline"
  },
  "items-stretch": {
    alignItems: "stretch"
  },
  "self-auto": {
    alignSelf: "auto"
  },
  "self-start": {
    alignSelf: "flex-start"
  },
  "self-end": {
    alignSelf: "flex-end"
  },
  "self-center": {
    alignSelf: "center"
  },
  "self-stretch": {
    alignSelf: "stretch"
  },
  "justify-start": {
    justifyContent: "flex-start"
  },
  "justify-end": {
    justifyContent: "flex-end"
  },
  "justify-center": {
    justifyContent: "center"
  },
  "justify-between": {
    justifyContent: "space-between"
  },
  "justify-around": {
    justifyContent: "space-around"
  },
  "content-center": {
    alignContent: "center"
  },
  "content-start": {
    alignContent: "flex-start"
  },
  "content-end": {
    alignContent: "flex-end"
  },
  "content-between": {
    alignContent: "space-between"
  },
  "content-around": {
    alignContent: "space-around"
  },
  // NOTE: flex-auto etc. as defined in the config can't be used in RN.
  "flex-1": {
    flex: 1
  },
  "flex-2": {
    flex: 2
  },
  "flex-3": {
    flex: 3
  },
  "flex-4": {
    flex: 4
  }
};

Object.entries(config.theme.flexGrow).forEach(function (_ref) {
  var _ref2 = slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];

  var suffix = key === "default" ? "" : "-" + key;
  styles$5["flex-grow" + suffix] = { flexGrow: parseInt(value) };
});

Object.entries(config.theme.flexShrink).forEach(function (_ref3) {
  var _ref4 = slicedToArray(_ref3, 2),
      key = _ref4[0],
      value = _ref4[1];

  var suffix = key === "default" ? "" : "-" + key;
  styles$5["flex-shrink" + suffix] = { flexShrink: parseInt(value) };
});

var tw = reactNative.StyleSheet.create(_extends({}, styles, styles$1, style, styles$2, {
  hidden: {
    display: "none"
  }
}, styles$5, {
  "font-sans": {
    fontFamily: "system-ui, BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif"
  },
  "font-serif": {
    fontFamily: "Constantia, Lucida Bright, Lucidabright, Lucida Serif, Lucida, DejaVu Serif, Bitstream Vera Serif, Liberation Serif, Georgia, serif"
  },
  "font-mono": {
    fontFamily: "Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace"
  },
  "font-hairline": {
    fontWeight: "100"
  },
  "font-thin": {
    fontWeight: "200"
  },
  "font-light": {
    fontWeight: "300"
  },
  "font-normal": {
    fontWeight: "400"
  },
  "font-medium": {
    fontWeight: "500"
  },
  "font-semibold": {
    fontWeight: "600"
  },
  "font-bold": {
    fontWeight: "700"
  },
  "font-extrabold": {
    fontWeight: "800"
  },
  "font-black": {
    fontWeight: "900"
  },
  "h-1": {
    height: 4
  },
  "h-2": {
    height: 8
  },
  "h-3": {
    height: 12
  },
  "h-4": {
    height: 16
  },
  "h-5": {
    height: 20
  },
  "h-6": {
    height: 24
  },
  "h-8": {
    height: 32
  },
  "h-10": {
    height: 40
  },
  "h-12": {
    height: 48
  },
  "h-16": {
    height: 64
  },
  "h-20": {
    height: 80
  },
  "h-24": {
    height: 96
  },
  "h-32": {
    height: 128
  },
  "h-48": {
    height: 192
  },
  "h-64": {
    height: 256
  },
  "h-auto": {
    height: "auto"
  },
  "h-px": {
    height: 1
  },
  "h-full": {
    height: "100%"
  },
  "leading-none": {
    lineHeight: 1
  },
  "leading-tight": {
    lineHeight: 1.25
  },
  "leading-snug": {
    lineHeight: 1.375
  },
  "leading-normal": {
    lineHeight: 1.5
  },
  "leading-relaxed": {
    lineHeight: 1.625
  },
  "leading-loose": {
    lineHeight: 2
  },
  "max-h-full": {
    maxHeight: "100%"
  },
  "max-w-xs": {
    maxWidth: 320
  },
  "max-w-sm": {
    maxWidth: 480
  },
  "max-w-md": {
    maxWidth: 640
  },
  "max-w-lg": {
    maxWidth: 800
  },
  "max-w-xl": {
    maxWidth: 960
  },
  "max-w-2xl": {
    maxWidth: 1120
  },
  "max-w-3xl": {
    maxWidth: 1280
  },
  "max-w-4xl": {
    maxWidth: 1440
  },
  "max-w-5xl": {
    maxWidth: 1600
  },
  "max-w-full": {
    maxWidth: "100%"
  },
  "min-h-0": {
    minHeight: 0
  },
  "min-h-full": {
    minHeight: "100%"
  },
  "min-w-0": {
    minWidth: 0
  },
  "min-w-full": {
    minWidth: "100%"
  },
  "opacity-0": {
    opacity: 0
  },
  "opacity-25": {
    opacity: 0.25
  },
  "opacity-50": {
    opacity: 0.5
  },
  "opacity-75": {
    opacity: 0.75
  },
  "opacity-100": {
    opacity: 1
  }
}, spacing, position, {
  "text-left": {
    textAlign: "left"
  },
  "text-center": {
    textAlign: "center"
  },
  "text-right": {
    textAlign: "right"
  },
  "text-justify": {
    textAlign: "justify"
  },
  "text-xs": {
    fontSize: 12
  },
  "text-sm": {
    fontSize: 14
  },
  "text-base": {
    fontSize: 16
  },
  "text-lg": {
    fontSize: 18
  },
  "text-xl": {
    fontSize: 20
  },
  "text-2xl": {
    fontSize: 24
  },
  "text-3xl": {
    fontSize: 30
  },
  "text-4xl": {
    fontSize: 36
  },
  "text-5xl": {
    fontSize: 48
  },
  italic: {
    fontStyle: "italic"
  },
  roman: {
    fontStyle: "normal"
  },
  "tracking-tight": {
    letterSpacing: -0.8
  },
  "tracking-normal": {
    letterSpacing: 0
  },
  "tracking-wide": {
    letterSpacing: 0.8
  }
}, styles$4));

var buildComponent = function buildComponent(Component) {
  return function (_ref) {
    var className = _ref.className,
        style = _ref.style,
        rest = objectWithoutProperties(_ref, ["className", "style"]);

    var props = _extends({}, rest, { style: [] });

    if (className) {
      props.style = className.split(" ").map(function (c) {
        return tw[c];
      });
    }
    if (style) {
      // 'style' can be either an object or array.
      var inline = reactNative.StyleSheet.flatten([style].flat());

      props.style.push(inline);
    }
    return React.createElement(Component, props);
  };
};
var View = buildComponent(reactNative.View);
var ScrollView = buildComponent(reactNative.ScrollView);
var Text = buildComponent(reactNative.Text);
var Image = buildComponent(reactNative.Image);
var TextInput = buildComponent(reactNative.TextInput);
var TouchableOpacity = buildComponent(reactNative.TouchableOpacity);

exports.buildComponent = buildComponent;
exports.View = View;
exports.ScrollView = ScrollView;
exports.Text = Text;
exports.Image = Image;
exports.TextInput = TextInput;
exports.TouchableOpacity = TouchableOpacity;
//# sourceMappingURL=index.js.map
